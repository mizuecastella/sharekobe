from __future__ import unicode_literals     # <-文字列を全てunicodeとして扱う。
import MeCab


def levenshtein(s1, s2):
    """単語S1と単語S2のLevenshtein距離を求める関数"""
    m = len(s1)+1
    n = len(s2)+1
    tbl = {}
    for i in range(m): tbl[i, 0] = i
    for j in range(n): tbl[0, j] = j
    for i in range(1, m):
        for j in range(1, n):
            cost = 0 if s1[i-1] == s2[j-1] else 1
            tbl[i, j] = min(tbl[i, j-1]+1, tbl[i-1, j]+1, tbl[i-1, j-1]+cost)
    return tbl[i, j]


def kunrei(tango):
    """日本語の単語の読みを、訓令式ローマ字に変換する関数"""

    # MeCabで読みを取得する
    m = MeCab.Tagger("-Oyomi")
    tangoyomi = m.parse(tango).strip()

    # カタカナと訓令式ローマ字対応表
    romantbl = [('ッキャ', 'kkya'),
                ('ッキュ', 'kkyu'),
                ('ッキョ', 'kkyo'),
                ('ッシャ', 'ssya'),
                ('ッシュ', 'ssyu'),
                ('ッショ', 'ssyo'),
                ('ッチャ', 'ttya'),
                ('ッチュ', 'ttyu'),
                ('ッチョ', 'ttyo'),
                ('ッニャ', 'nnya'),
                ('ッニュ', 'nnyu'),
                ('ッニョ', 'nnyo'),
                ('ッヒャ', 'hhya'),
                ('ッヒュ', 'hhyu'),
                ('ッヒョ', 'hhyo'),
                ('ッミャ', 'mmya'),
                ('ッミュ', 'mmyu'),
                ('ッミョ', 'mmyo'),
                ('ッリャ', 'rrya'),
                ('ッリュ', 'rryu'),
                ('ッリョ', 'rryo'),
                ('ッギャ', 'ggya'),
                ('ッギュ', 'ggyu'),
                ('ッギョ', 'ggyo'),
                ('ッジャ', 'zzya'),
                ('ッジュ', 'zzyu'),
                ('ッジョ', 'zzyo'),
                ('ッヂャ', 'zzya'),
                ('ッヂュ', 'zzyu'),
                ('ッヂョ', 'zzyo'),
                ('ッビャ', 'bbya'),
                ('ッビュ', 'bbyu'),
                ('ッビョ', 'bbyo'),
                ('ッピャ', 'ppya'),
                ('ッピュ', 'ppyu'),
                ('ッピョ', 'ppyo'),
                ('ッイェ', 'yye'),
                ('ッウィ', 'wwi'),
                ('ッウェ', 'wwe'),
                ('ッウォ', 'wwo'),
                ('ッヴァ', 'vva'),
                ('ッヴィ', 'vvi'),
                ('ッヴェ', 'vve'),
                ('ッヴォ', 'vvo'),
                ('ッヴュ', 'vvyu'),
                ('ッヴョ', 'vvyo'),
                ('ッキェ', 'kkye'),
                ('ックァ', 'kkwa'),
                ('ックィ', 'kkwi'),
                ('ックェ', 'kkwe'),
                ('ックォ', 'kkwo'),
                ('ッグァ', 'ggwa'),
                ('ッグィ', 'ggwi'),
                ('ッグェ', 'ggwe'),
                ('ッグォ', 'ggwo'),
                ('ッシェ', 'ssye'),
                ('ッジェ', 'zzye'),
                ('ッスィ', 'sswi'),
                ('ッズィ', 'zzwi'),
                ('ッチェ', 'ttye'),
                ('ッツァ', 'ttwa'),
                ('ッツィ', 'ttwi'),
                ('ッツェ', 'ttwe'),
                ('ッツォ', 'ttwo'),
                ('ッティ', 'tthi'),
                ('ッテュ', 'tthu'),
                ('ッディ', 'ddhi'),
                ('ッデュ', 'ddyu'),
                ('ットゥ', 'ttwu'),
                ('ッドゥ', 'ddwu'),
                ('ッニェ', 'nnye'),
                ('ッヒェ', 'hhye'),
                ('ッファ', 'ffa'),
                ('ッフィ', 'ffi'),
                ('ッフェ', 'ffe'),
                ('ッフォ', 'ffo'),
                ('ッフュ', 'ffyu'),
                ('ッフョ', 'ffyo'),
                ('ッカ', 'kka'),
                ('ッキ', 'kki'),
                ('ック', 'kku'),
                ('ッケ', 'kke'),
                ('ッコ', 'kko'),
                ('ッサ', 'ssa'),
                ('ッシ', 'ssi'),
                ('ッス', 'ssu'),
                ('ッセ', 'sse'),
                ('ッソ', 'sso'),
                ('ッタ', 'tta'),
                ('ッチ', 'tti'),
                ('ッツ', 'ttu'),
                ('ッテ', 'tte'),
                ('ット', 'tto'),
                ('ッナ', 'nna'),
                ('ッニ', 'nni'),
                ('ッヌ', 'nnu'),
                ('ッネ', 'nne'),
                ('ッノ', 'nno'),
                ('ッハ', 'hha'),
                ('ッヒ', 'hhi'),
                ('ッフ', 'hhu'),
                ('ッヘ', 'hhe'),
                ('ッホ', 'hho'),
                ('ッマ', 'mma'),
                ('ッミ', 'mmi'),
                ('ッム', 'mmu'),
                ('ッメ', 'mme'),
                ('ッモ', 'mmo'),
                ('ッヤ', 'yya'),
                ('ッヰ', 'yyi'),
                ('ッユ', 'yyu'),
                ('ッヱ', 'yye'),
                ('ッヨ', 'yyo'),
                ('ッラ', 'rra'),
                ('ッリ', 'rri'),
                ('ッル', 'rru'),
                ('ッレ', 'rre'),
                ('ッロ', 'rro'),
                ('ッワ', 'wwa'),
                ('ッヲ', 'oo'),
                ('ッン', "nn'"),
                ('ッガ', 'gga'),
                ('ッギ', 'ggi'),
                ('ッグ', 'ggu'),
                ('ッゲ', 'gge'),
                ('ッゴ', 'ggo'),
                ('ッザ', 'zza'),
                ('ッジ', 'zzi'),
                ('ッズ', 'zzu'),
                ('ッゼ', 'zze'),
                ('ッゾ', 'zzo'),
                ('ッダ', 'dda'),
                ('ッヂ', 'zzi'),
                ('ッヅ', 'zzu'),
                ('ッデ', 'dde'),
                ('ッド', 'ddo'),
                ('ッバ', 'bba'),
                ('ッビ', 'bbi'),
                ('ッブ', 'bbu'),
                ('ッベ', 'bbe'),
                ('ッボ', 'bbo'),
                ('ッパ', 'ppa'),
                ('ッピ', 'ppi'),
                ('ップ', 'ppu'),
                ('ッペ', 'ppe'),
                ('ッポ', 'ppo'),
                ('キャ', 'kya'),
                ('キュ', 'kyu'),
                ('キョ', 'kyo'),
                ('シャ', 'sya'),
                ('シュ', 'syu'),
                ('ショ', 'syo'),
                ('チャ', 'tya'),
                ('チュ', 'tyu'),
                ('チョ', 'tyo'),
                ('ニャ', 'nya'),
                ('ニュ', 'nyu'),
                ('ニョ', 'nyo'),
                ('ヒャ', 'hya'),
                ('ヒュ', 'hyu'),
                ('ヒョ', 'hyo'),
                ('ミャ', 'mya'),
                ('ミュ', 'myu'),
                ('ミョ', 'myo'),
                ('リャ', 'rya'),
                ('リュ', 'ryu'),
                ('リョ', 'ryo'),
                ('ギャ', 'gya'),
                ('ギュ', 'gyu'),
                ('ギョ', 'gyo'),
                ('ジャ', 'zya'),
                ('ジュ', 'zyu'),
                ('ジョ', 'zyo'),
                ('ヂャ', 'zya'),
                ('ヂュ', 'zyu'),
                ('ヂョ', 'zyo'),
                ('ビャ', 'bya'),
                ('ビュ', 'byu'),
                ('ビョ', 'byo'),
                ('ピャ', 'pya'),
                ('ピュ', 'pyu'),
                ('ピョ', 'pyo'),
                ('イェ', 'ye'),
                ('ウィ', 'wi'),
                ('ウェ', 'we'),
                ('ウォ', 'wo'),
                ('ヴァ', 'va'),
                ('ヴィ', 'vi'),
                ('ヴェ', 've'),
                ('ヴォ', 'vo'),
                ('ヴュ', 'vyu'),
                ('ヴョ', 'vyo'),
                ('キェ', 'kye'),
                ('クァ', 'kwa'),
                ('クィ', 'kwi'),
                ('クェ', 'kwe'),
                ('クォ', 'kwo'),
                ('グァ', 'gwa'),
                ('グィ', 'gwi'),
                ('グェ', 'gwe'),
                ('グォ', 'gwo'),
                ('シェ', 'sye'),
                ('ジェ', 'zye'),
                ('スィ', 'swi'),
                ('ズィ', 'zwi'),
                ('チェ', 'tye'),
                ('ツァ', 'twa'),
                ('ツィ', 'twi'),
                ('ツェ', 'twe'),
                ('ツォ', 'two'),
                ('ティ', 'thi'),
                ('テュ', 'thu'),
                ('ディ', 'dhi'),
                ('デュ', 'dyu'),
                ('トゥ', 'twu'),
                ('ドゥ', 'dwu'),
                ('ニェ', 'nye'),
                ('ヒェ', 'hye'),
                ('ファ', 'fa'),
                ('フィ', 'fi'),
                ('フェ', 'fe'),
                ('フォ', 'fo'),
                ('フュ', 'fyu'),
                ('フョ', 'fyo'),
                ('ア', 'a'),
                ('イ', 'i'),
                ('ウ', 'u'),
                ('エ', 'e'),
                ('オ', 'o'),
                ('カ', 'ka'),
                ('キ', 'ki'),
                ('ク', 'ku'),
                ('ケ', 'ke'),
                ('コ', 'ko'),
                ('サ', 'sa'),
                ('シ', 'si'),
                ('ス', 'su'),
                ('セ', 'se'),
                ('ソ', 'so'),
                ('タ', 'ta'),
                ('チ', 'ti'),
                ('ツ', 'tu'),
                ('テ', 'te'),
                ('ト', 'to'),
                ('ナ', 'na'),
                ('ニ', 'ni'),
                ('ヌ', 'nu'),
                ('ネ', 'ne'),
                ('ノ', 'no'),
                ('ハ', 'ha'),
                ('ヒ', 'hi'),
                ('フ', 'hu'),
                ('ヘ', 'he'),
                ('ホ', 'ho'),
                ('マ', 'ma'),
                ('ミ', 'mi'),
                ('ム', 'mu'),
                ('メ', 'me'),
                ('モ', 'mo'),
                ('ヤ', 'ya'),
                ('ヰ', 'yi'),
                ('ユ', 'yu'),
                ('ヱ', 'ye'),
                ('ヨ', 'yo'),
                ('ラ', 'ra'),
                ('リ', 'ri'),
                ('ル', 'ru'),
                ('レ', 're'),
                ('ロ', 'ro'),
                ('ワ', 'wa'),
                ('ヲ', 'o'),
                ('ン', "n'"),
                ('ガ', 'ga'),
                ('ギ', 'gi'),
                ('グ', 'gu'),
                ('ゲ', 'ge'),
                ('ゴ', 'go'),
                ('ザ', 'za'),
                ('ジ', 'zi'),
                ('ズ', 'zu'),
                ('ゼ', 'ze'),
                ('ゾ', 'zo'),
                ('ダ', 'da'),
                ('ヂ', 'zi'),
                ('ヅ', 'zu'),
                ('デ', 'de'),
                ('ド', 'do'),
                ('バ', 'ba'),
                ('ビ', 'bi'),
                ('ブ', 'bu'),
                ('ベ', 'be'),
                ('ボ', 'bo'),
                ('パ', 'pa'),
                ('ピ', 'pi'),
                ('プ', 'pu'),
                ('ペ', 'pe'),
                ('ポ', 'po'),
                ('ー', '-'),
                ('ー', '-')]

    # romantblの順にカタカナをローマ字に置き換える。
    for kana, roman in romantbl:
        tangoyomi = tangoyomi.replace(kana, roman)

    return tangoyomi


def sharekobe(tango_input):
    """入力された単語から洒落候補を生成する
    まだまだ頭悪いのでいろいろ改良しなきゃなぁってなところだけど、
    とりあえずキリがいいのでここで上げておく。"""

    # tangoを訓令式アルファベットに変換する。
    omote = kunrei(tango_input)

    # ことわざ等のリスト（ura_iroha)を開いて、
    with open('ura_iroha', 'rt') as f:
        for row in f:
            columns = row.rstrip().split()
            ura1 = columns[0]
            ura2 = columns[1]
            lsa = levenshtein(omote, ura1)

            if 0 < lsa < len(ura1) * 0.5:
                share = tango + ura2
                print(share)


tango = input()
sharekobe(tango)
